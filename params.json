{"name":"123","tagline":"123","body":"乱写一通，希望大家轻拍emc7，有错的话欢迎指出\r\n\r\n准备知识：\r\n抽象类\r\n匿名类\r\n接口\r\n多态\r\n\r\n什么是抽象工厂\r\n根据GoF的解释：抽象工厂的意图是提供一个创建一系列相关或者相互依赖对象的接口，而无需指定他们的具体的类。\r\n\r\n是不是有点懵？那就对了。翻译为大白话的意思就是，创建一个接口（假设叫做）Factory,这个接口可以创建某一个类(假设叫做Animal)相关的所有对象(假设叫做Food)，但是你不知道也不用关心这个Factory是如何创建的。\r\n\r\n用它来干啥\r\n假设我们要创建一个喂食器(假设叫做Feeder)，我们要让这个Feeder非常通用，那么它就要和动物实现松耦合，也就是说它不用知道再喂养的是什么动物，单纯的喂就好了。\r\n\r\n下面我给出它的实现：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\nclass Feeder{\r\n    Factory fac;\r\n     \r\n    public Feeder(Factory f) {\r\n        this.fac =f;\r\n    }\r\n     \r\n    void feedAnimal(){\r\n        Animal a = fac.createAnimal();\r\n        Food food = fac.createFood();\r\n        a.eat(food);\r\n    }\r\n}\r\n\r\n这个Feeder类有持有一个工厂Factory，这个工厂可以创建出动物Animal和食物Food，然后将食物喂给动物吃。是不是很简单的就实现了一个比较通用的Feeder.\r\n\r\n看看我们如何使用它。\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\npublic static void main(String[] args) {\r\n        Feeder catfeeder = new Feeder(new CatFac());\r\n        catfeeder.feedAnimal();\r\n        System.out.println(\"------\");\r\n        Feeder dogFeeder = new Feeder(new DogFac());\r\n        dogFeeder.feedAnimal();\r\n    }\r\n\r\n我们给Feeder传入不同的工厂CatFac和DogFac,它就会去实现喂不同动物的行为。下面我们来看看输出。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}